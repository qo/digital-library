openapi: 3.0.3
info:
  title: Digital Library - OpenAPI 3.0
  description: This is a swagger API for a Digital Library project
  version: 1.0.11
servers:
  - url: /api
tags:
  - name: user
    description: Everything about users
  - name: book
    description: Everything about books
  - name: author
    description: Everything about authors
  - name: favorite book
    description: Books favorited by user
  - name: book review
    description: Books reviewed by user
  - name: favorite author
    description: Authors favorited by user
  - name: authorship
    description: Book written by author
paths:
  /user:
    post:
      tags:
        - user
      summary: Create a user
      description: Create a user with specified id, first, second name and role
      operationId: postUser
      requestBody:
        description: The info of a user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User Created
        '400':
          description: Bad Request # example: json body wasn't attached
        '403':
          description: Forbidden # example: user already signed in
        '500':
          description: Internal Server Error # example: storage api returned malformed user
        '503':
          description: Service Unavailable # example: rest api is not working
  /user/{id}:
    get:
      tags:
        - user
      summary: Get the user
      description: Get the first, second name and the role of the user with the specified ID
      operationId: getUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user to get
      responses:
        '200':
          description: User Fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    put:
      tags:
        - user
      summary: Update the user
      description: Update the first, second name and the role of the user with the specified ID
      operationId: putUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user to update
      requestBody:
        description: The updated user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User Updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized # example: user is not signed in and tries to update some user
        '403':
          description: Forbidden # example: user is signed in and tries to update some other user
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    delete:
      tags:
        - user
      summary: Delete the user
      description: Delete the user with the specified ID
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user to delete
      responses:
        '200':
          description: User Deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
  /user/{id}/books:
    get:
      tags:
        - user
      summary: Get the favorite books for the specified user
      description: Get the ID, ISBN, title, year and publisher for each book that is favorite for the user with the specified ID
      operationId: getUsersBooks
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User's Books Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable

  /user/{id}/authors:
    get:
      tags:
        - user
      summary: Get the favorite authors for the specified user
      description: Get the ID and full name for each author that is favorite for the user with the specified ID
      operationId: getUsersAuthors
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User's Authors Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable

  /user/{id}/reviews:
    get:
      tags:
        - user
      summary: Get the reviews written by the specified user
      description: Get the book ID, ISBN, title, year and publisher and review rating for each review written by the user with the specified ID
      operationId: getUsersReviews
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User's Reviews Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewByUser"
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable

  /book:
    post:
      tags:
        - book
      summary: Create a book
      description: Create a book with specified ID, ISBN, title, year and publisher
      operationId: postBook
      requestBody:
        description: The info of a book to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book Created
        '400':
          description: Bad Request # example: json body wasn't attached
        '401':
          description: Unauthorized # example: user is not signed in
        '403':
          description: Forbidden # example: user can't upload books
        '500':
          description: Internal Server Error # example: storage api returned malformed book
        '503':
          description: Service Unavailable # example: rest api is not working
  /book/{id}:
    get:
      tags:
        - book
      summary: Get the book
      description: Get the ISBN, title, year and publisher of the book with the specified ID
      operationId: getBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book to get
      responses:
        '200':
          description: Book Fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
        '404':
          description: Book Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    put:
      tags:
        - book
      summary: Update the book
      description: Update the ISBN, title, year and publisher of the book with the specified ID
      operationId: putBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book to update
      requestBody:
        description: The updated book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book Updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized # example: user is not signed in and tries to update some book
        '403':
          description: Forbidden # example: user is signed in and tries to update book he doesn't have a right to update
        '404':
          description: Book Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    delete:
      tags:
        - book
      summary: Delete the book
      description: Delete the book with the specified ID
      operationId: deleteBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book to delete
      responses:
        '200':
          description: Book Deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Book Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
  /book/{id}/users:
    get:
      tags:
        - book
      summary: Get the users that have this book as their favorite
      description: Get the ID, first, second name and role of each user that has the book with the specified ID as their favorite
      operationId: getBooksUsers
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book
      responses:
        '200':
          description: Book's Users Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
  /book/{id}/authors:
    get:
      tags:
        - book
      summary: Get the authors of the specified book
      description: Get the ID and full name of each author of the book with the specified ID
      operationId: getBooksAuthors
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book
      responses:
        '200':
          description: Book's Authors Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable        
          
  /book/{id}/reviews:
    get:
      tags:
        - book
      summary: Get the reviews on the specified book
      description: Get the user ID, first, second name and role and review rating for each review on the book with the specified ID
      operationId: getBooksReviews
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the book
      responses:
        '200':
          description: Book's Reviews Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewOfBook"
        '400':
          description: Bad Request
        '404':
          description: User Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
  
  /author:
    post:
      tags:
        - author
      summary: Create an author
      description: Create an author with specified ID and full name
      operationId: postAuthor
      requestBody:
        description: The info of an author to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author Created
        '400':
          description: Bad Request # example: json body wasn't attached
        '401':
          description: Unauthorized # example: user is not signed in
        '403':
          description: Forbidden # example: user can't create authors
        '500':
          description: Internal Server Error # example: storage api returned malformed author
        '503':
          description: Service Unavailable # example: rest api is not working
  /author/{id}:
    get:
      tags:
        - author
      summary: Get the author
      description: Get the full name of the author with the specified ID
      operationId: getAuthor
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the author to get
      responses:
        '200':
          description: Author Fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad Request
        '404':
          description: Author Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    put:
      tags:
        - author
      summary: Update the author
      description: Update the full name of the author with the specified ID
      operationId: putAuthor
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the author to update
      requestBody:
        description: The updated author data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author Updated
        '400':
          description: Bad Request
        '401':
          description: Unauthorized # example: user is not signed in
        '403':
          description: Forbidden # example: user is signed in and tries to update author he doesn't have a right to update
        '404':
          description: Author Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
    delete:
      tags:
        - author
      summary: Delete the author
      description: Delete the author with the specified ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the author to delete
      responses:
        '200':
          description: Author Deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Author Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
  /author/{id}/users:
    get:
      tags:
        - author
      summary: Get all users that have the specified author as their favorite
      description: Get the ID, first, second name and role of each user that have the author with the speicified ID as their favorite
      operationId: getAuthorsUsers
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the author
      responses:
        '200':
          description: Author's Users Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '400':
          description: Bad Request
        '404':
          description: Author Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
  /author/{id}/books:
    get:
      tags:
        - author
      summary: Get all the books of the specified author
      description: Get the ID, ISBN, title, year and publisher of each book the author with the specified ID wrote
      operationId: getAuthorsBooks
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the author
      responses:
        '200':
          description: Author's Books Fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          description: Bad Request
        '404':
          description: Author Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
  /favorite-book/{user_id}/{book_id}:
    post:
      tags:
        - favorite book
      summary: Make the specified book favorited by the specified user
      description: Make the book with the specified ID favorited by the user with the specified ID
      operationId: postFavoriteBook
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book
      responses:
        '200':
          description: Book Favorited
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User Or Book Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
  
    delete:
      tags:
        - favorite book
      summary: Make the specified book not favorited by the specified user
      description: Make the book with the specified ID not favorited by the user with the specified ID
      operationId: deleteFavoriteBook
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book
      responses:
        '200':
          description: Book Not Favorited
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User Or Book Not Found
        '500':
          description: Internal Server Error
        '503':
          description: Service Unavailable
          
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        first_name:
          type: string
          example: admin
        second_name:
          type: string
          example: admin
        role:
          type: integer
          format: int64
          description: User role (user, mod, admin)
          example: 3
          enum:
            - 1
            - 2
            - 3
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        isbn:
          type: string
          example: 978-0451524
        title:
          type: string
          example: 1984
        year:
          type: integer
          format: int64
          example: 1961
        publisher:
          type: string
          example: Signet Classic
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        full_name:
          type: string
          example: George Orwell
    ReviewByUser:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            rating:
              type: integer
              format: int64
              example: 10
    ReviewOfBook:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            rating:
              type: integer
              format: int64
    FavoriteBook:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        book_id:
          type: integer
          format: int64
          example: 1
    BookReview:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        book_id:
          type: integer
          format: int64
          example: 1
    FavoriteAuthor:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        author_id:
          type: integer
          format: int64
          example: 1
    Authorship:
      type: object
      properties:
        author_id:
          type: integer
          format: int64
          example: 1
        book_id:
          type: integer
          format: int64
          example: 1
